/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package mondial.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Country implements org.apache.thrift.TBase<Country, Country._Fields>, java.io.Serializable, Cloneable, Comparable<Country> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Country");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField POPULATION_FIELD_DESC = new org.apache.thrift.protocol.TField("population", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TOTAL_AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("totalArea", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField TOTAL_GDP_FIELD_DESC = new org.apache.thrift.protocol.TField("totalGdp", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField NEIGHBOUR_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("neighbourIds", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField ENCOMPASSED_FIELD_DESC = new org.apache.thrift.protocol.TField("encompassed", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CountryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CountryTupleSchemeFactory());
  }

  public int id; // required
  public String name; // required
  public int population; // required
  public double totalArea; // required
  public double totalGdp; // required
  public List<Integer> neighbourIds; // required
  public List<Encompassed> encompassed; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    POPULATION((short)3, "population"),
    TOTAL_AREA((short)4, "totalArea"),
    TOTAL_GDP((short)5, "totalGdp"),
    NEIGHBOUR_IDS((short)6, "neighbourIds"),
    ENCOMPASSED((short)7, "encompassed");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // POPULATION
          return POPULATION;
        case 4: // TOTAL_AREA
          return TOTAL_AREA;
        case 5: // TOTAL_GDP
          return TOTAL_GDP;
        case 6: // NEIGHBOUR_IDS
          return NEIGHBOUR_IDS;
        case 7: // ENCOMPASSED
          return ENCOMPASSED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __POPULATION_ISSET_ID = 1;
  private static final int __TOTALAREA_ISSET_ID = 2;
  private static final int __TOTALGDP_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POPULATION, new org.apache.thrift.meta_data.FieldMetaData("population", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_AREA, new org.apache.thrift.meta_data.FieldMetaData("totalArea", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_GDP, new org.apache.thrift.meta_data.FieldMetaData("totalGdp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NEIGHBOUR_IDS, new org.apache.thrift.meta_data.FieldMetaData("neighbourIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.ENCOMPASSED, new org.apache.thrift.meta_data.FieldMetaData("encompassed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Encompassed.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Country.class, metaDataMap);
  }

  public Country() {
  }

  public Country(
    int id,
    String name,
    int population,
    double totalArea,
    double totalGdp,
    List<Integer> neighbourIds,
    List<Encompassed> encompassed)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.population = population;
    setPopulationIsSet(true);
    this.totalArea = totalArea;
    setTotalAreaIsSet(true);
    this.totalGdp = totalGdp;
    setTotalGdpIsSet(true);
    this.neighbourIds = neighbourIds;
    this.encompassed = encompassed;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Country(Country other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.population = other.population;
    this.totalArea = other.totalArea;
    this.totalGdp = other.totalGdp;
    if (other.isSetNeighbourIds()) {
      List<Integer> __this__neighbourIds = new ArrayList<Integer>(other.neighbourIds);
      this.neighbourIds = __this__neighbourIds;
    }
    if (other.isSetEncompassed()) {
      List<Encompassed> __this__encompassed = new ArrayList<Encompassed>(other.encompassed.size());
      for (Encompassed other_element : other.encompassed) {
        __this__encompassed.add(new Encompassed(other_element));
      }
      this.encompassed = __this__encompassed;
    }
  }

  public Country deepCopy() {
    return new Country(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    setPopulationIsSet(false);
    this.population = 0;
    setTotalAreaIsSet(false);
    this.totalArea = 0.0;
    setTotalGdpIsSet(false);
    this.totalGdp = 0.0;
    this.neighbourIds = null;
    this.encompassed = null;
  }

  public int getId() {
    return this.id;
  }

  public Country setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public Country setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getPopulation() {
    return this.population;
  }

  public Country setPopulation(int population) {
    this.population = population;
    setPopulationIsSet(true);
    return this;
  }

  public void unsetPopulation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POPULATION_ISSET_ID);
  }

  /** Returns true if field population is set (has been assigned a value) and false otherwise */
  public boolean isSetPopulation() {
    return EncodingUtils.testBit(__isset_bitfield, __POPULATION_ISSET_ID);
  }

  public void setPopulationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POPULATION_ISSET_ID, value);
  }

  public double getTotalArea() {
    return this.totalArea;
  }

  public Country setTotalArea(double totalArea) {
    this.totalArea = totalArea;
    setTotalAreaIsSet(true);
    return this;
  }

  public void unsetTotalArea() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALAREA_ISSET_ID);
  }

  /** Returns true if field totalArea is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalArea() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALAREA_ISSET_ID);
  }

  public void setTotalAreaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALAREA_ISSET_ID, value);
  }

  public double getTotalGdp() {
    return this.totalGdp;
  }

  public Country setTotalGdp(double totalGdp) {
    this.totalGdp = totalGdp;
    setTotalGdpIsSet(true);
    return this;
  }

  public void unsetTotalGdp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALGDP_ISSET_ID);
  }

  /** Returns true if field totalGdp is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalGdp() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALGDP_ISSET_ID);
  }

  public void setTotalGdpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALGDP_ISSET_ID, value);
  }

  public int getNeighbourIdsSize() {
    return (this.neighbourIds == null) ? 0 : this.neighbourIds.size();
  }

  public java.util.Iterator<Integer> getNeighbourIdsIterator() {
    return (this.neighbourIds == null) ? null : this.neighbourIds.iterator();
  }

  public void addToNeighbourIds(int elem) {
    if (this.neighbourIds == null) {
      this.neighbourIds = new ArrayList<Integer>();
    }
    this.neighbourIds.add(elem);
  }

  public List<Integer> getNeighbourIds() {
    return this.neighbourIds;
  }

  public Country setNeighbourIds(List<Integer> neighbourIds) {
    this.neighbourIds = neighbourIds;
    return this;
  }

  public void unsetNeighbourIds() {
    this.neighbourIds = null;
  }

  /** Returns true if field neighbourIds is set (has been assigned a value) and false otherwise */
  public boolean isSetNeighbourIds() {
    return this.neighbourIds != null;
  }

  public void setNeighbourIdsIsSet(boolean value) {
    if (!value) {
      this.neighbourIds = null;
    }
  }

  public int getEncompassedSize() {
    return (this.encompassed == null) ? 0 : this.encompassed.size();
  }

  public java.util.Iterator<Encompassed> getEncompassedIterator() {
    return (this.encompassed == null) ? null : this.encompassed.iterator();
  }

  public void addToEncompassed(Encompassed elem) {
    if (this.encompassed == null) {
      this.encompassed = new ArrayList<Encompassed>();
    }
    this.encompassed.add(elem);
  }

  public List<Encompassed> getEncompassed() {
    return this.encompassed;
  }

  public Country setEncompassed(List<Encompassed> encompassed) {
    this.encompassed = encompassed;
    return this;
  }

  public void unsetEncompassed() {
    this.encompassed = null;
  }

  /** Returns true if field encompassed is set (has been assigned a value) and false otherwise */
  public boolean isSetEncompassed() {
    return this.encompassed != null;
  }

  public void setEncompassedIsSet(boolean value) {
    if (!value) {
      this.encompassed = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case POPULATION:
      if (value == null) {
        unsetPopulation();
      } else {
        setPopulation((Integer)value);
      }
      break;

    case TOTAL_AREA:
      if (value == null) {
        unsetTotalArea();
      } else {
        setTotalArea((Double)value);
      }
      break;

    case TOTAL_GDP:
      if (value == null) {
        unsetTotalGdp();
      } else {
        setTotalGdp((Double)value);
      }
      break;

    case NEIGHBOUR_IDS:
      if (value == null) {
        unsetNeighbourIds();
      } else {
        setNeighbourIds((List<Integer>)value);
      }
      break;

    case ENCOMPASSED:
      if (value == null) {
        unsetEncompassed();
      } else {
        setEncompassed((List<Encompassed>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NAME:
      return getName();

    case POPULATION:
      return Integer.valueOf(getPopulation());

    case TOTAL_AREA:
      return Double.valueOf(getTotalArea());

    case TOTAL_GDP:
      return Double.valueOf(getTotalGdp());

    case NEIGHBOUR_IDS:
      return getNeighbourIds();

    case ENCOMPASSED:
      return getEncompassed();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case POPULATION:
      return isSetPopulation();
    case TOTAL_AREA:
      return isSetTotalArea();
    case TOTAL_GDP:
      return isSetTotalGdp();
    case NEIGHBOUR_IDS:
      return isSetNeighbourIds();
    case ENCOMPASSED:
      return isSetEncompassed();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Country)
      return this.equals((Country)that);
    return false;
  }

  public boolean equals(Country that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_population = true;
    boolean that_present_population = true;
    if (this_present_population || that_present_population) {
      if (!(this_present_population && that_present_population))
        return false;
      if (this.population != that.population)
        return false;
    }

    boolean this_present_totalArea = true;
    boolean that_present_totalArea = true;
    if (this_present_totalArea || that_present_totalArea) {
      if (!(this_present_totalArea && that_present_totalArea))
        return false;
      if (this.totalArea != that.totalArea)
        return false;
    }

    boolean this_present_totalGdp = true;
    boolean that_present_totalGdp = true;
    if (this_present_totalGdp || that_present_totalGdp) {
      if (!(this_present_totalGdp && that_present_totalGdp))
        return false;
      if (this.totalGdp != that.totalGdp)
        return false;
    }

    boolean this_present_neighbourIds = true && this.isSetNeighbourIds();
    boolean that_present_neighbourIds = true && that.isSetNeighbourIds();
    if (this_present_neighbourIds || that_present_neighbourIds) {
      if (!(this_present_neighbourIds && that_present_neighbourIds))
        return false;
      if (!this.neighbourIds.equals(that.neighbourIds))
        return false;
    }

    boolean this_present_encompassed = true && this.isSetEncompassed();
    boolean that_present_encompassed = true && that.isSetEncompassed();
    if (this_present_encompassed || that_present_encompassed) {
      if (!(this_present_encompassed && that_present_encompassed))
        return false;
      if (!this.encompassed.equals(that.encompassed))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Country other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPopulation()).compareTo(other.isSetPopulation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPopulation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.population, other.population);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalArea()).compareTo(other.isSetTotalArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalArea, other.totalArea);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalGdp()).compareTo(other.isSetTotalGdp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalGdp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalGdp, other.totalGdp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNeighbourIds()).compareTo(other.isSetNeighbourIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeighbourIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.neighbourIds, other.neighbourIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEncompassed()).compareTo(other.isSetEncompassed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncompassed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encompassed, other.encompassed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Country(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("population:");
    sb.append(this.population);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalArea:");
    sb.append(this.totalArea);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalGdp:");
    sb.append(this.totalGdp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("neighbourIds:");
    if (this.neighbourIds == null) {
      sb.append("null");
    } else {
      sb.append(this.neighbourIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("encompassed:");
    if (this.encompassed == null) {
      sb.append("null");
    } else {
      sb.append(this.encompassed);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CountryStandardSchemeFactory implements SchemeFactory {
    public CountryStandardScheme getScheme() {
      return new CountryStandardScheme();
    }
  }

  private static class CountryStandardScheme extends StandardScheme<Country> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Country struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POPULATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.population = iprot.readI32();
              struct.setPopulationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL_AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalArea = iprot.readDouble();
              struct.setTotalAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOTAL_GDP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalGdp = iprot.readDouble();
              struct.setTotalGdpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NEIGHBOUR_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.neighbourIds = new ArrayList<Integer>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  int _elem2;
                  _elem2 = iprot.readI32();
                  struct.neighbourIds.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setNeighbourIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ENCOMPASSED
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.encompassed = new ArrayList<Encompassed>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  Encompassed _elem5;
                  _elem5 = new Encompassed();
                  _elem5.read(iprot);
                  struct.encompassed.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setEncompassedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Country struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(POPULATION_FIELD_DESC);
      oprot.writeI32(struct.population);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_AREA_FIELD_DESC);
      oprot.writeDouble(struct.totalArea);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_GDP_FIELD_DESC);
      oprot.writeDouble(struct.totalGdp);
      oprot.writeFieldEnd();
      if (struct.neighbourIds != null) {
        oprot.writeFieldBegin(NEIGHBOUR_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.neighbourIds.size()));
          for (int _iter6 : struct.neighbourIds)
          {
            oprot.writeI32(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.encompassed != null) {
        oprot.writeFieldBegin(ENCOMPASSED_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.encompassed.size()));
          for (Encompassed _iter7 : struct.encompassed)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CountryTupleSchemeFactory implements SchemeFactory {
    public CountryTupleScheme getScheme() {
      return new CountryTupleScheme();
    }
  }

  private static class CountryTupleScheme extends TupleScheme<Country> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Country struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetPopulation()) {
        optionals.set(2);
      }
      if (struct.isSetTotalArea()) {
        optionals.set(3);
      }
      if (struct.isSetTotalGdp()) {
        optionals.set(4);
      }
      if (struct.isSetNeighbourIds()) {
        optionals.set(5);
      }
      if (struct.isSetEncompassed()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetPopulation()) {
        oprot.writeI32(struct.population);
      }
      if (struct.isSetTotalArea()) {
        oprot.writeDouble(struct.totalArea);
      }
      if (struct.isSetTotalGdp()) {
        oprot.writeDouble(struct.totalGdp);
      }
      if (struct.isSetNeighbourIds()) {
        {
          oprot.writeI32(struct.neighbourIds.size());
          for (int _iter8 : struct.neighbourIds)
          {
            oprot.writeI32(_iter8);
          }
        }
      }
      if (struct.isSetEncompassed()) {
        {
          oprot.writeI32(struct.encompassed.size());
          for (Encompassed _iter9 : struct.encompassed)
          {
            _iter9.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Country struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.population = iprot.readI32();
        struct.setPopulationIsSet(true);
      }
      if (incoming.get(3)) {
        struct.totalArea = iprot.readDouble();
        struct.setTotalAreaIsSet(true);
      }
      if (incoming.get(4)) {
        struct.totalGdp = iprot.readDouble();
        struct.setTotalGdpIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.neighbourIds = new ArrayList<Integer>(_list10.size);
          for (int _i11 = 0; _i11 < _list10.size; ++_i11)
          {
            int _elem12;
            _elem12 = iprot.readI32();
            struct.neighbourIds.add(_elem12);
          }
        }
        struct.setNeighbourIdsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.encompassed = new ArrayList<Encompassed>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            Encompassed _elem15;
            _elem15 = new Encompassed();
            _elem15.read(iprot);
            struct.encompassed.add(_elem15);
          }
        }
        struct.setEncompassedIsSet(true);
      }
    }
  }

}

